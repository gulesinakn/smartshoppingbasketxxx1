#!/usr/bin/env python3 # -*- coding: utf-8 -*- 

 

#import RPi.GPIO as GPIO 

import MFRC522 

import signal 

import I2C_LCD_driver from time import * import pymysql 

 

continue_reading = True 

mylcd = I2C_LCD_driver.lcd() 

 

Host = "localhost" User = "admin" Password = "Leonel@01" database = "urun" 

 

conn = pymysql.connect(host=Host, user=User, password=Password, db=database) 

cur = conn.cursor() top = 0 

# function to read uid and convert it to a string 

def uidToString(uid): mystring = "" 

  

for i in uid: 

mystring = format(i, '02X') + mystring 

return mystring 

 

# Capture SIGINT for cleanup when the script is aborted 

def end_read(signal, frame): global continue_reading 

print("Ctrl+C captured, ending read.") continue_reading = False GPIO.cleanup() 

 

# Hook the SIGINT signal.signal(signal.SIGINT, end_read) 

 

# Create an object of the class MFRC522 MIFAREReader = MFRC522.MFRC522() 

 

# Welcome message mylcd.lcd_display_string("Akilli sepeti", 1) 

mylcd.lcd_display_string("hosgeldiniz", 2) print("Akilli sepeti hosgeldiniz!") time.sleep(2) 

mylcd.lcd_clear() mylcd.lcd_display_string("Sepet'e", 1) 

mylcd.lcd_display_string("Urun ekleyin", 2) print("Sepete urun ekleyin!") 

 

# main code 

while continue_reading: # Scan for cards (status, TagType) = 

MIFAREReader.MFRC522_Request(MIFAREReader.PICC_REQIDL) 

 

# If a card is found 

if status == MIFAREReader.MI_OK: # Get the UID of the card 

(status, uid) = MIFAREReader.MFRC522_SelectTagSN() 

 

 

= %s)" 

  

# If we have the UID, continue 

if status == MIFAREReader.MI_OK: #print("Card detected") 

#print("Card read UID: %s" % uidToString(uid)) kart_id = uidToString(uid) 

#print(kart id)#for debug id card 

query = f"SELECT urun_adi,fiyat FROM urun_table WHERE (urun_id 

 

result = cur.execute(query,(kart_id,)) conn.commit() 

if result == 1:#urun veri tabanina olup olmadigini kontrol 

  

ediyor ve eger urun varsa 

data = cur.fetchone() urun_adi, f = data fiyat = int(f) 

if fiyat == 0:#onaylama karti veri tabani fiyati 0 olarak tanimlanmis ve sistem onu sonlandiriyor 

mylcd.lcd_clear() mylcd.lcd_display_string("odeni̇yor...", 1) print("odeni̇yor ...") 

time.sleep(2) mylcd.lcd_clear() 

mylcd.lcd_display_string("sepet bos", 1) 

  

mylcd.lcd_display_string("Urun ekleyin", 2) print("Sepet bos Urun ekleyin") 

delete = f"DELETE FROM sepet" delt = cur.execute(delete) conn.commit() 

top = 0#toplam sifirlaniyor 

else:#alisveris devam ediyor 

query1 = f"SELECT urun_id FROM sepet WHERE (urun_id = 

%s)"#check if object(urun) is on basket 

result1 = cur.execute(query1,(kart_id,)) 

if result1 == 1:#urun sepete olup olmadigini kontrol 

  

ediyor ve eger varsa cikartiliyor 

 

ediyor ve eger yoksa ('{kart_id}')" 

  

 

delete = f"DELETE FROM sepet WHERE (urun_id = %s)" delt = cur.execute(delete,(kart_id,)) conn.commit() 

mylcd.lcd_clear() mylcd.lcd_display_string(urun_adi, 1) 

mylcd.lcd_display_string("cikariliyor...", 2) print(urun_adi + " cikariliyor...") time.sleep(1) 

top = top - fiyat#sepeten urun fiyati toplamdan 

elif result1 == 0:#urun sepete olup olmadigini kontrol add = f"INSERT INTO sepet (urun_id) VALUES cur.execute(add) 

conn.commit() mylcd.lcd_clear() 

mylcd.lcd_display_string(urun_adi + " : " + 

  

str(fiyat) + " TL", 1) 

eklendi") ekleniyor 

  

 

mylcd.lcd_display_string("eklendi", 2) print(urun_adi + " : " + str(fiyat) + " TL 

 

time.sleep(1) 

top = top + fiyat#sepete urun fiyati toplama 

  

 

 

mylcd.lcd_clear() mylcd.lcd_display_string("sepet toplam :", 1) mylcd.lcd_display_string(str(top), 2) print("sepet toplam :" + str(top)) 

else:#urun veri tabanina olup olmadigini kontrol ediyor ve eger 

 

mylcd.lcd_clear() mylcd.lcd_display_string("bu urun yok", 1) print("Bu urun vridabanina yok...") time.sleep(1) 

mylcd.lcd_clear() mylcd.lcd_display_string("sepet toplam :", 1) mylcd.lcd_display_string(str(top), 2) print("sepet toplam :" + str(top)) 

  

else: 

print("Authentication error") mylcd.lcd_display_string("Error!") 

 
